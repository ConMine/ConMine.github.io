source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
colnames(other_data)
View(other_data)
Imputed_data <- read.csv("../Data/imputation/ImputedData.csv")
Imputed_report <- read.csv("../Data/imputation/ImputationReport.csv")
#Load packages
library(dplyr)
library(ggplot2)
ImputedValues = read.csv("ImputedData.csv")
ImputationReport = read.csv("ImputationReport.csv")
View(Imputed_report)
View(Imputed_data)
#Assign X
X = Imputed_data$Species[151]
TempData = Imputed_data[Imputed_data$Species == X,]
FamilyGroup = TempData$Family
X
TempData
Imputed_data = read.csv("ImputedData.csv")
Imputed_report = read.csv("ImputationReport.csv")
plot_imputation <- function(Sp,type){
#Assign Sp
TempData = Imputed_data[Imputed_data$Species == Sp,]
FamilyGroup = TempData$Family
#Lifespan first
if(type == 1){
if(grepl("Imputed",TempData$LifespanStatus)){
MeanLine = round(10^TempData$Lifespan_Years)
LowerCI = round(10^TempData$LowerCI_Lifespan_Years)
UpperCI = round(10^TempData$UpperCI_Lifespan_Years)
p <- ggplot(Imputed_data[Imputed_data$Family == FamilyGroup,]) +
geom_density(aes(Sp = 10^(Lifespan_Years)), fill = "light grey") +
geom_vline(Spintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
geom_vline(Spintercept = LowerCI, colour = "red", size = 0.1) +
geom_vline(Spintercept = UpperCI, colour = "red", size = 0.1) +
annotate("rect", Spmin = LowerCI, SpmaSp = UpperCI, ymin = 0, ymaSp = Inf, fill = "red", alpha = 0.1) +
scale_y_continuous(eSppand = c(0, 0)) +
labs(Sp = "Lifespan(years)",
title = paste("Predicted lifespan (95% confidence intervals): ", MeanLine, " (", LowerCI, ", ", UpperCI,") years", sep = ""),
subtitle = paste("Family: ", FamilyGroup, sep = ""),
caption = paste("Values are derived from imputation. Warnings: ", ImputationReport$MissingWarning[1], "; ", ImputationReport$PhyloBias, "; ", ImputationReport$TraiBias, ".", sep = "")) +
theme_classic() +
theme(plot.caption=element_teSpt(face="bold", color="dark red"))
} else {
MeanLine = round(10^TempData$Lifespan_Years)
p <- ggplot(Imputed_data[Imputed_data$Family == FamilyGroup,]) +
geom_density(aes(Sp = 10^(Lifespan_Years)), fill = "light grey") +
geom_vline(Spintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
scale_y_continuous(eSppand = c(0, 0)) +
labs(Sp = "Lifespan(years)",
title = paste("Lifespan:", MeanLine, "years"),
subtitle = paste("Family: ", FamilyGroup, sep = "")) +
theme_classic()
}
#Print plot
} else {
#Lifespan first
if(grepl("Imputed",TempData$BodymassStatus)){
MeanLine = round(10^TempData$Bodymass_g)
LowerCI = round(10^TempData$LowerCI_Bodymass_g)
UpperCI = round(10^TempData$UpperCI_Bodymass_g)
p <- ggplot(Imputed_data[Imputed_data$Family == FamilyGroup,]) +
geom_density(aes(Sp = 10^(Bodymass_g)), fill = "light grey") +
geom_vline(Spintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
geom_vline(Spintercept = LowerCI, colour = "red", size = 0.1) +
geom_vline(Spintercept = UpperCI, colour = "red", size = 0.1) +
annotate("rect", Spmin = LowerCI, SpmaSp = UpperCI, ymin = 0, ymaSp = Inf, fill = "red", alpha = 0.1) +
scale_y_continuous(eSppand = c(0, 0)) +
labs(Sp = "Body mass(grams)",
title = paste("Predicted body mass (95% confidence intervals): ", MeanLine, " (", LowerCI, ", ", UpperCI,") grams", sep = ""),
subtitle = paste("Family: ", FamilyGroup, sep = ""),
caption = paste("Values are derived from imputation. Warnings: ", ImputationReport$MissingWarning[1], "; ", ImputationReport$PhyloBias, "; ", ImputationReport$TraiBias, ".", sep = "")) +
theme_classic() +
theme(plot.caption=element_teSpt(face="bold", color="dark red"))
} else {
MeanLine = round(10^TempData$Bodymass_g)
p <- ggplot(Imputed_data[Imputed_data$Family == FamilyGroup,]) +
geom_density(aes(Sp = 10^(Bodymass_g)), fill = "light grey") +
geom_vline(Spintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
scale_y_continuous(eSppand = c(0, 0)) +
labs(Sp = "Body mass(grams)",
title = paste("Body mass:", MeanLine, "grams"),
subtitle = paste("Family: ", FamilyGroup, sep = "")) +
theme_classic()
}
}
print(p)
}
plot_imputation("a",1)
plot_imputation(Imputed_data$Species[1],1)
ImputedValues = read.csv("ImputedData.csv")
ImputationReport = read.csv("ImputationReport.csv")
#Assign X
plot_imputation_ls <- function(X){
TempData = ImputedValues[ImputedValues$Species == X,]
FamilyGroup = TempData$Family
if(grepl("Imputed",TempData$LifespanStatus)){
MeanLine = round(10^TempData$Lifespan_Years)
LowerCI = round(10^TempData$LowerCI_Lifespan_Years)
UpperCI = round(10^TempData$UpperCI_Lifespan_Years)
ggplot(ImputedValues[ImputedValues$Family == FamilyGroup,]) +
geom_density(aes(x = 10^(Lifespan_Years)), fill = "light grey") +
geom_vline(xintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
geom_vline(xintercept = LowerCI, colour = "red", size = 0.1) +
geom_vline(xintercept = UpperCI, colour = "red", size = 0.1) +
annotate("rect", xmin = LowerCI, xmax = UpperCI, ymin = 0, ymax = Inf, fill = "red", alpha = 0.1) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Lifespan(years)",
title = paste("Predicted lifespan (95% confidence intervals): ", MeanLine, " (", LowerCI, ", ", UpperCI,") years", sep = ""),
subtitle = paste("Family: ", FamilyGroup, sep = ""),
caption = paste("Values are derived from imputation. Warnings: ", ImputationReport$MissingWarning[1], "; ", ImputationReport$PhyloBias, "; ", ImputationReport$TraiBias, ".", sep = "")) +
theme_classic() +
theme(plot.caption=element_text(face="bold", color="dark red"))
} else {
MeanLine = round(10^TempData$Lifespan_Years)
ggplot(ImputedValues[ImputedValues$Family == FamilyGroup,]) +
geom_density(aes(x = 10^(Lifespan_Years)), fill = "light grey") +
geom_vline(xintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Lifespan(years)",
title = paste("Lifespan:", MeanLine, "years"),
subtitle = paste("Family: ", FamilyGroup, sep = "")) +
theme_classic()
}
}
#Lifespan first
plot_imputation_BM <- function(X){
TempData = ImputedValues[ImputedValues$Species == X,]
FamilyGroup = TempData$Family
if(grepl("Imputed",TempData$BodymassStatus)){
MeanLine = round(10^TempData$Bodymass_g)
LowerCI = round(10^TempData$LowerCI_Bodymass_g)
UpperCI = round(10^TempData$UpperCI_Bodymass_g)
ggplot(ImputedValues[ImputedValues$Family == FamilyGroup,]) +
geom_density(aes(x = 10^(Bodymass_g)), fill = "light grey") +
geom_vline(xintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
geom_vline(xintercept = LowerCI, colour = "red", size = 0.1) +
geom_vline(xintercept = UpperCI, colour = "red", size = 0.1) +
annotate("rect", xmin = LowerCI, xmax = UpperCI, ymin = 0, ymax = Inf, fill = "red", alpha = 0.1) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Body mass(grams)",
title = paste("Predicted body mass (95% confidence intervals): ", MeanLine, " (", LowerCI, ", ", UpperCI,") grams", sep = ""),
subtitle = paste("Family: ", FamilyGroup, sep = ""),
caption = paste("Values are derived from imputation. Warnings: ", ImputationReport$MissingWarning[1], "; ", ImputationReport$PhyloBias, "; ", ImputationReport$TraiBias, ".", sep = "")) +
theme_classic() +
theme(plot.caption=element_text(face="bold", color="dark red"))
} else {
MeanLine = round(10^TempData$Bodymass_g)
ggplot(ImputedValues[ImputedValues$Family == FamilyGroup,]) +
geom_density(aes(x = 10^(Bodymass_g)), fill = "light grey") +
geom_vline(xintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Body mass(grams)",
title = paste("Body mass:", MeanLine, "grams"),
subtitle = paste("Family: ", FamilyGroup, sep = "")) +
theme_classic()
}
#Print plot
}
plot_imputation_ls <- function(X,ImputedValues,ImputationReport){
TempData = ImputedValues[ImputedValues$Species == X,]
FamilyGroup = TempData$Family
if(grepl("Imputed",TempData$LifespanStatus)){
MeanLine = round(10^TempData$Lifespan_Years)
LowerCI = round(10^TempData$LowerCI_Lifespan_Years)
UpperCI = round(10^TempData$UpperCI_Lifespan_Years)
ggplot(ImputedValues[ImputedValues$Family == FamilyGroup,]) +
geom_density(aes(x = 10^(Lifespan_Years)), fill = "light grey") +
geom_vline(xintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
geom_vline(xintercept = LowerCI, colour = "red", size = 0.1) +
geom_vline(xintercept = UpperCI, colour = "red", size = 0.1) +
annotate("rect", xmin = LowerCI, xmax = UpperCI, ymin = 0, ymax = Inf, fill = "red", alpha = 0.1) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Lifespan(years)",
title = paste("Predicted lifespan (95% confidence intervals): ", MeanLine, " (", LowerCI, ", ", UpperCI,") years", sep = ""),
subtitle = paste("Family: ", FamilyGroup, sep = ""),
caption = paste("Values are derived from imputation. Warnings: ", ImputationReport$MissingWarning[1], "; ", ImputationReport$PhyloBias, "; ", ImputationReport$TraiBias, ".", sep = "")) +
theme_classic() +
theme(plot.caption=element_text(face="bold", color="dark red"))
} else {
MeanLine = round(10^TempData$Lifespan_Years)
ggplot(ImputedValues[ImputedValues$Family == FamilyGroup,]) +
geom_density(aes(x = 10^(Lifespan_Years)), fill = "light grey") +
geom_vline(xintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Lifespan(years)",
title = paste("Lifespan:", MeanLine, "years"),
subtitle = paste("Family: ", FamilyGroup, sep = "")) +
theme_classic()
}
}
#Lifespan first
plot_imputation_BM <- function(X,ImputedValues,ImputationReport){
TempData = ImputedValues[ImputedValues$Species == X,]
FamilyGroup = TempData$Family
if(grepl("Imputed",TempData$BodymassStatus)){
MeanLine = round(10^TempData$Bodymass_g)
LowerCI = round(10^TempData$LowerCI_Bodymass_g)
UpperCI = round(10^TempData$UpperCI_Bodymass_g)
ggplot(ImputedValues[ImputedValues$Family == FamilyGroup,]) +
geom_density(aes(x = 10^(Bodymass_g)), fill = "light grey") +
geom_vline(xintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
geom_vline(xintercept = LowerCI, colour = "red", size = 0.1) +
geom_vline(xintercept = UpperCI, colour = "red", size = 0.1) +
annotate("rect", xmin = LowerCI, xmax = UpperCI, ymin = 0, ymax = Inf, fill = "red", alpha = 0.1) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Body mass(grams)",
title = paste("Predicted body mass (95% confidence intervals): ", MeanLine, " (", LowerCI, ", ", UpperCI,") grams", sep = ""),
subtitle = paste("Family: ", FamilyGroup, sep = ""),
caption = paste("Values are derived from imputation. Warnings: ", ImputationReport$MissingWarning[1], "; ", ImputationReport$PhyloBias, "; ", ImputationReport$TraiBias, ".", sep = "")) +
theme_classic() +
theme(plot.caption=element_text(face="bold", color="dark red"))
} else {
MeanLine = round(10^TempData$Bodymass_g)
ggplot(ImputedValues[ImputedValues$Family == FamilyGroup,]) +
geom_density(aes(x = 10^(Bodymass_g)), fill = "light grey") +
geom_vline(xintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Body mass(grams)",
title = paste("Body mass:", MeanLine, "grams"),
subtitle = paste("Family: ", FamilyGroup, sep = "")) +
theme_classic()
}
#Print plot
}
View(Imputed_data)
plot_imputation_ls("Strigops_habroptila",Imputed_data,Imputed_report)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
#functions to plot imputed data
#Lifespan
plot_imputation_ls <- function(X,ImputedValues,ImputationReport,trait){
TempData = ImputedValues[ImputedValues$Species == X,]
FamilyGroup = TempData$Family
if(trait == "Life_span"){
if(grepl("Imputed",TempData$LifespanStatus)){
MeanLine = round(10^TempData$Lifespan_Years)
LowerCI = round(10^TempData$LowerCI_Lifespan_Years)
UpperCI = round(10^TempData$UpperCI_Lifespan_Years)
ggplot(ImputedValues[ImputedValues$Family == FamilyGroup,]) +
geom_density(aes(x = 10^(Lifespan_Years)), fill = "light grey") +
geom_vline(xintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
geom_vline(xintercept = LowerCI, colour = "red", size = 0.1) +
geom_vline(xintercept = UpperCI, colour = "red", size = 0.1) +
annotate("rect", xmin = LowerCI, xmax = UpperCI, ymin = 0, ymax = Inf, fill = "red", alpha = 0.1) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Lifespan(years)",
title = paste("Predicted lifespan (95% confidence intervals): ", MeanLine, " (", LowerCI, ", ", UpperCI,") years", sep = ""),
subtitle = paste("Family: ", FamilyGroup, sep = ""),
caption = paste("Values are derived from imputation. Warnings: ", ImputationReport$MissingWarning[1], "; ", ImputationReport$PhyloBias, "; ", ImputationReport$TraiBias, ".", sep = "")) +
theme_classic() +
theme(plot.caption=element_text(face="bold", color="dark red"))
} else {
MeanLine = round(10^TempData$Lifespan_Years)
ggplot(ImputedValues[ImputedValues$Family == FamilyGroup,]) +
geom_density(aes(x = 10^(Lifespan_Years)), fill = "light grey") +
geom_vline(xintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Lifespan(years)",
title = paste("Lifespan:", MeanLine, "years"),
subtitle = paste("Family: ", FamilyGroup, sep = "")) +
theme_classic()
}
} else if (trait == "Body_size"){
if(grepl("Imputed",TempData$BodymassStatus)){
MeanLine = round(10^TempData$Bodymass_g)
LowerCI = round(10^TempData$LowerCI_Bodymass_g)
UpperCI = round(10^TempData$UpperCI_Bodymass_g)
ggplot(ImputedValues[ImputedValues$Family == FamilyGroup,]) +
geom_density(aes(x = 10^(Bodymass_g)), fill = "light grey") +
geom_vline(xintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
geom_vline(xintercept = LowerCI, colour = "red", size = 0.1) +
geom_vline(xintercept = UpperCI, colour = "red", size = 0.1) +
annotate("rect", xmin = LowerCI, xmax = UpperCI, ymin = 0, ymax = Inf, fill = "red", alpha = 0.1) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Body mass(grams)",
title = paste("Predicted body mass (95% confidence intervals): ", MeanLine, " (", LowerCI, ", ", UpperCI,") grams", sep = ""),
subtitle = paste("Family: ", FamilyGroup, sep = ""),
caption = paste("Values are derived from imputation. Warnings: ", ImputationReport$MissingWarning[1], "; ", ImputationReport$PhyloBias, "; ", ImputationReport$TraiBias, ".", sep = "")) +
theme_classic() +
theme(plot.caption=element_text(face="bold", color="dark red"))
}
else {
MeanLine = round(10^TempData$Bodymass_g)
ggplot(ImputedValues[ImputedValues$Family == FamilyGroup,]) +
geom_density(aes(x = 10^(Bodymass_g)), fill = "light grey") +
geom_vline(xintercept = MeanLine, colour = "red", linetype = "dotted", size = 2) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Body mass(grams)",
title = paste("Body mass:", MeanLine, "grams"),
subtitle = paste("Family: ", FamilyGroup, sep = "")) +
theme_classic()
}
}
}
plot_imputation_ls(X[1])
plot_imputation_ls(X[1],Imputed_data,Imputed_report,"Life_span")
plot_imputation_ls(X[1],Imputed_data,Imputed_report,"Body_size")
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ImputationPlots.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ImputationPlots.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ImputationPlots.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ImputationPlots.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("ConMine"),
sidebarLayout(sidebarPanel(selectInput(inputId = "Species_Choice",
label = "Choose a letter:",
choices = names)),
mainPanel(tabsetPanel(type = "tabs",
tabPanel("Trait data",
selectInput(inputId = "imputed_trait",
label = "Choose a imputed trait:",
choices = c("Life span","Body size")
))),
plotOutput("Imputed_Plot")
)
)
)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ImputationPlots.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ImputationPlots.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ImputationPlots.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ImputationPlots.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ImputationPlots.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ImputationPlots.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
# See above for the definitions of ui and server
source("ShinyApp/helpers.R")
source("ShinyApp/ImputationPlots.R")
source("ShinyApp/ConMine_ui.R")
source("ShinyApp/ConMine_server.R")
shinyApp(ui = ui, server = server)
Real_data <- read.csv("../Data/parrot_csv/parrot_traits.csv")
Real_data
Real_data <- read.csv("../Data/parrot_csv/parrot_traits.csv") %>%
na.omit()
Real_data
View(Real_data)
Real_data[Real_data == "value"]
Real_data[Real_data == "value"] <- NA
Real_data[Real_data == "unit"] <- NA
Real_data
Real_data %>% na.omit()
#read in real data
Real_data <- read.csv("../Data/parrot_csv/parrot_traits.csv") %>%
select(-bodymass.adult_bodymass.value,-bodymass.adult_bodymass.unit)
View(Real_data)
#read in real data
Real_data <- read.csv("../Data/parrot_csv/parrot_traits.csv") %>%
select(-bodymass.adult_bodymass.value,-bodymass.adult_bodymass.unit,lifespan.value,lifespan.unit)
#read in real data
Real_data <- read.csv("../Data/parrot_csv/parrot_traits.csv") %>%
select(-bodymass.adult_bodymass.value,-bodymass.adult_bodymass.unit,lifespan.value,lifespan.unit)
#read in real data
Real_data <- read.csv("../Data/parrot_csv/parrot_traits.csv") %>%
select(-bodymass.adult_bodymass.value,-bodymass.adult_bodymass.unit,
lifespan.value,lifespan.unit)
Real_data[Real_data == "value"] <- NA
Real_data[Real_data == "unit"] <- NA
View(Real_data)
#read in real data
Real_data <- read.csv("../Data/parrot_csv/parrot_traits.csv") %>%
select(-bodymass.adult_bodymass.value,-bodymass.adult_bodymass.unit,
-lifespan.value,-lifespan.unit)
Real_data[Real_data == "value"] <- NA
Real_data[Real_data == "unit"] <- NA
Real_data %>% na.omit() %>%
gather("key","value",-Species,-Source)
Real_data %>% na.omit() %>%
gather("key","value",-Species,-Database)
Real_data %>% na.omit() %>%
gather("key","value",-Species,-Database) %>%
filter(!is.nan(value))
Real_data %>% na.omit() %>%
gather("key","value",-Species,-Database) %>%
filter(value == NaN)
Real_data %>% na.omit() %>%
gather("key","value",-Species,-Database) %>%
filter(value == "NaN")
Real_data %>% na.omit() %>%
gather("key","value",-Species,-Database) %>%
filter(value != NaN)
Real_data <- Real_data %>% na.omit() %>%
gather("key","value",-Species,-Database)
#read in real data
Real_data <- read.csv("../Data/parrot_csv/parrot_traits.csv") %>%
select(-bodymass.adult_bodymass.value,-bodymass.adult_bodymass.unit,
-lifespan.value,-lifespan.unit)
Real_data[Real_data == "value"] <- NA
Real_data[Real_data == "unit"] <- NA
Real_data <- Real_data %>% na.omit() %>%
gather("key","value",-Species,-Database) %>%
filter(value != "NaN")
View(Real_data)
Real_data_values <- Real_data %>% na.omit() %>%
gather("key","value",-Species,-Database) %>%
filter(value != "NaN") %>%
filter(grepl("unit",key))
View(Real_data_values)
Real_data
Real_data_values <- Real_data %>% na.omit() %>%
gather("key","value",-Species,-Database) %>%
filter(value != "NaN")
Real_data_values <- Real_data %>% na.omit() %>%
gather("key","value",-Species,-Database) %>%
filter(value != "NaN") %>%
filter(!grepl(".unit",key))
Real_data_values
shinyApp(ui = ui, server = server)
